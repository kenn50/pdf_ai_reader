@page "/"
@rendermode InteractiveServer

@using System.IO
@using System
@using Microsoft.AspNetCore.Components.Forms
@using System.Diagnostics;
@using PdfiumViewer; // Make sure this is here

<h3>Upload and Convert PDF Page to Image</h3>

<InputFile OnChange="HandleFileSelected" />
<input type="number" @bind="PageNumber" min="1" />
<button @onclick="ProcessFile" disabled="@(!IsFileSelected)">Upload and Convert</button>

@if (!string.IsNullOrEmpty(ImageData))
{
    <img src="@ImageData" alt="Converted Page Image" />
}

@code {
    private IBrowserFile? UploadedFile;
    private int PageNumber = 1;
    private string? ImageData;
    private bool IsFileSelected => UploadedFile != null;

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
        Debug.WriteLine($"File selected: {UploadedFile?.Name ?? "No file"} ({UploadedFile?.Size ?? 0} bytes)");
    }

    private async Task ProcessFile()
    {
        if (UploadedFile == null)
        {
            Debug.WriteLine("No file uploaded.");
            return;
        }

        if (PageNumber <= 0)
        {
            Debug.WriteLine("Invalid page number.");
            return;
        }

        try
        {
            using var stream = UploadedFile.OpenReadStream(maxAllowedSize: long.MaxValue);

            // Use MemoryStream to read all bytes reliably
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            byte[] buffer = memoryStream.ToArray();

            Debug.WriteLine($"Total bytes read into buffer: {buffer.Length} bytes");

            ImageData = await ConvertToImage(buffer, PageNumber);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error in ProcessFile: {ex.Message}");
            Debug.WriteLine($"StackTrace: {ex.StackTrace}");
        }
    }

    private async Task<string?> ConvertToImage(byte[] fileBytes, int pageNumber)
    {
        return await Task.Run(() => ConvertFileToImage(fileBytes, pageNumber));
    }

    private string? ConvertFileToImage(byte[] fileBytes, int pageNumber)
    {
        try
        {
            Debug.WriteLine($"FileBytes Length inside ConvertFileToImage: {fileBytes.Length}");
            using var stream = new MemoryStream(fileBytes);
            stream.Seek(0, SeekOrigin.Begin); // Reset the position - CRUCIAL

            Debug.WriteLine($"Stream Length inside ConvertFileToImage: {stream.Length}");

            using var pdfDocument = PdfiumViewer.PdfDocument.Load(stream); // The problematic line
            Debug.WriteLine("PDF Document loaded successfully.");

            using var image = pdfDocument.Render(pageNumber - 1, 300, 300, PdfiumViewer.PdfRenderFlags.Annotations);
            using var memoryStream = new MemoryStream();
            image.Save(memoryStream, System.Drawing.Imaging.ImageFormat.Png);
            var base64Image = Convert.ToBase64String(memoryStream.ToArray());
            return $"data:image/png;base64,{base64Image}";
        }
        catch (PdfiumViewer.PdfException pdfEx)
        {
            Debug.WriteLine($"PdfiumViewer.PdfException: {pdfEx.Message}");
            Debug.WriteLine($"StackTrace: {pdfEx.StackTrace}");
            return $"Error: Invalid PDF format or corrupted: {pdfEx.Message}";
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"General Exception in ConvertFileToImage: {ex.Message}");
            Debug.WriteLine($"StackTrace: {ex.StackTrace}");
            return $"Error: Conversion failed: {ex.Message}";
        }
    }
}