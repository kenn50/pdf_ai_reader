@page "/"
@rendermode InteractiveServer

@using System.IO
@using System
@using Microsoft.AspNetCore.Components.Forms
@using System.Diagnostics;
@using PdfiumViewer; // Make sure this is here
@using System.Drawing.Imaging // Ensure this is present for ImageFormat

<h3>Upload and Convert PDF Page to Image</h3>

<InputFile OnChange="HandleFileSelected" accept=".pdf" />
<input type="number" @bind="PageNumber" min="1" @bind:after="ProcessFile" /> / @TotalPages
<button @onclick="@(() => ChangePage(-1))">Prev</button>
<button @onclick="@(() => ChangePage(1))">Next</button>


<br />

@if (!string.IsNullOrEmpty(ImageData))
{
    <img src="@(ImagePrefix + ImageData)" alt="Converted Page Image" />
    <button @onclick="SendImage">Send Image</button>
}
@if (!string.IsNullOrEmpty(Response))
{
    <p>@Response</p>
}

@code {
    private IBrowserFile? UploadedFile;
    private int PageNumber = 1;
    private string? ImageData;
    private string ImagePrefix = "data:image/png;base64,";
    private bool IsFileSelected => UploadedFile != null;
    private int TotalPages = 0;
    private string? Response;


    private async Task SendImage() {
        if (!string.IsNullOrEmpty(ImageData)) { 
            Response = await CommunicateWithGemini.GetTTSFriendlyText(ImageData, "image/png");
        }

    }

    private async Task ChangePage(int increment)
    {
        PageNumber += increment;
        PageNumber = Clamp(PageNumber, 0, TotalPages);
        await ProcessFile();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        UploadedFile = e.File;
        Debug.WriteLine($"File selected: {UploadedFile?.Name ?? "No file"} ({UploadedFile?.Size ?? 0} bytes)");
        await LoadPdfInfo();
    }

    private async Task LoadPdfInfo()
    {
        if (UploadedFile == null)
        {
            return;
        }

        try
        {
            using var stream = UploadedFile.OpenReadStream(maxAllowedSize: long.MaxValue);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            byte[] buffer = memoryStream.ToArray();


            memoryStream.Seek(0, SeekOrigin.Begin);

            using var pdfDocument = PdfiumViewer.PdfDocument.Load(memoryStream);
            TotalPages = pdfDocument.PageCount;
            PageNumber = 1; // Set to the first page
            await ProcessFile(); // Show the first page immediately
        }
        catch (PdfiumViewer.PdfException pdfEx)
        {
            Debug.WriteLine($"PdfiumViewer.PdfException in LoadPdfInfo: {pdfEx.Message}");
            Debug.WriteLine($"StackTrace: {pdfEx.StackTrace}");
            // Handle PDF specific errors here, perhaps show a message to the user
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"General Exception in LoadPdfInfo: {ex.Message}");
            Debug.WriteLine($"StackTrace: {ex.StackTrace}");
            // Handle other potential errors during file loading
        }
    }

    private int Clamp(int n, int min, int max) { 
        // Clamp logic for PageNumber
        if (n > max)
        {
            n = max;
        }
        else if (n <= min)
        {
            n = 1;
        }
        return n;

    }

    private async Task ProcessFile()
    {

        if (UploadedFile == null)
        {
            Debug.WriteLine("No file uploaded.");
            return;
        }

        if (TotalPages == 0)
        {
            Debug.WriteLine("Total pages is 0, cannot process.");
            return;
        }

        PageNumber = Clamp(PageNumber, 0, TotalPages);

        

        try
        {
            using var stream = UploadedFile.OpenReadStream(maxAllowedSize: long.MaxValue);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            byte[] buffer = memoryStream.ToArray();

            ImageData = await ConvertToImage(buffer, PageNumber);
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error in ProcessFile: {ex.Message}");
            Debug.WriteLine($"StackTrace: {ex.StackTrace}");
        }
    }

    private async Task<string?> ConvertToImage(byte[] fileBytes, int pageNumber)
    {
        return await Task.Run(() => ConvertFileToImage(fileBytes, pageNumber));
    }

    private string? ConvertFileToImage(byte[] fileBytes, int pageNumber)
    {
        try
        {
            using var stream = new MemoryStream(fileBytes);
            stream.Seek(0, SeekOrigin.Begin);

            using var pdfDocument = PdfiumViewer.PdfDocument.Load(stream);

            using var image = pdfDocument.Render(pageNumber - 1, 300, 300, PdfiumViewer.PdfRenderFlags.Annotations);
            using var memoryStream = new MemoryStream();
            image.Save(memoryStream, ImageFormat.Png); // Ensure ImageFormat is accessible
            var base64Image = Convert.ToBase64String(memoryStream.ToArray());
            return base64Image;
        }
        catch (PdfiumViewer.PdfException pdfEx)
        {
            Debug.WriteLine($"PdfiumViewer.PdfException in ConvertFileToImage: {pdfEx.Message}");
            Debug.WriteLine($"StackTrace: {pdfEx.StackTrace}");
            return $"Error: Invalid PDF format or corrupted: {pdfEx.Message}";
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"General Exception in ConvertFileToImage: {ex.Message}");
            Debug.WriteLine($"StackTrace: {ex.StackTrace}");
            return $"Error: Conversion failed: {ex.Message}";
        }
    }
}